/* tslint:disable */
{{#each models}}
{{#if isCustomScalar}}

export type {{ name }} = any;
{{/if}}
{{#if isObject}}

export interface {{ name }}{{#if isArgumentsType}}Args{{/if}}{{#if hasImplementedInterfaces}} extends {{#each implementedInterfaces}}{{this}}{{#unless @last}},{{/unless}}{{/each}}{{/if}} {
  {{#each fields}}
  {{ name }}: {{#if isArray}}Array<{{/if}}{{ type }}{{#if isArray}}>{{/if}}{{#unless isRequired}} | null{{/unless}};
  {{/each}}
}
{{/if}}
{{#if isEnum}}

export type {{ name }} = {{#each enumValues }}"{{ value }}"{{#unless @last}} | {{/unless}}{{/each}};
{{/if}}
{{#if isUnion}}

  {{#if hasUnionTypes}}
export type {{ name }} = {{#each unionTypes}}{{this}}{{#unless @last}} | {{/unless}}{{/each}};
  {{/if}}
{{/if}}
{{/each}}
{{#each documents}}

export namespace {{ name }} {
  export type Variables = {
  {{#each variables}}
      {{ name }}: {{#if isArray}}Array<{{/if}}{{ type }}{{#if isArray}}>{{/if}}{{#unless isRequired}} | null{{/unless}};
  {{/each}}
  }
  {{#each innerTypes}}

  export type {{#if isRoot}}Result{{else}}{{ name }}{{/if}} = {
  {{#if isInlineFragment}}
    __typename = "{{schemaTypeName}}";
  {{/if}}
  {{#each fields}}
    {{ name }}: {{#if isArray}}Array<{{/if}}{{ type }}{{#if isArray}}>{{/if}};
  {{/each}}
  } {{#each fragmentsUsed}}& {{typeName}}.Fragment {{/each }}{{#if hasInlineFragments}}& ({{#each inlineFragments}}{{ typeName }}InlineFragment | {{/each}}{}) {{/if}}
  {{/each}}
}
{{/each}}
